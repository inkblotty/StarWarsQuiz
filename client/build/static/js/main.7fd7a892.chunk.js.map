{"version":3,"sources":["assets/Starjedi.ttf","lib/helpers.ts","components/Header.tsx","components/RadioButtons.tsx","App.tsx","serviceWorker.js","index.js"],"names":["module","exports","colors","makeTheme","dark","theme","backgroundColor","errorColor","focusColor","successColor","textColor","spacingUnit","fontSize","heading","main","small","subheading","StyledHeader","styled","h1","Header","props","StyledFieldset","fieldset","StyledLegend","legend","StyledDiv","div","StyledLabel","label","disabled","StyledRadio","input","RadioButtons","options","value","map","opt","i","key","name","htmlFor","aria-disabled","aria-invalid","errored","checked","type","GlobalStyles","createGlobalStyle","App","useState","darkSideMode","AppTheme","console","log","Fragment","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sHAAAA,EAAOC,QAAU,IAA0B,sC,iGCC9BC,EACJ,OADIA,EAEJ,UAFIA,EAGA,UAHAA,EAID,UAJCA,EAMJ,OAsBIC,EAAY,eAACC,EAAD,8DAAmB,CAC1CC,MAAO,CACLH,OAAQ,CACNI,gBAAiBF,EAAOF,EAAeA,EACvCK,WAAYL,EACZM,WAAYJ,EAAOF,EAAkBA,EACrCO,aAAcP,EACdQ,UAAWN,EAAOF,EAAeA,GAEnCS,YAAa,EACbC,SAAU,CACRC,QAAS,GACTC,KAAM,GACNC,MAAO,GACPC,WAAY,O,6MCvClB,IAAMC,EAAeC,IAAOC,GAAV,KACI,qBAAGd,MAA8BH,OAAOI,mBACnD,qBAAGD,MAA8BH,OAAOQ,aACpC,qBAAGL,MAA8BO,SAASC,WAEzC,mBAA+C,EAA/C,EAAGR,MAA8BM,eACpC,gBAAGN,EAAH,EAAGA,MAAH,gBAAkD,EAApBA,EAAMM,YAApC,cAA6E,EAApBN,EAAMM,YAA/D,SAWES,EARA,SAACC,GACd,OACE,kBAACJ,EAAD,wB,27BCEJ,IAAMK,EAAiBJ,IAAOK,SAAV,KAMdC,EAAeN,IAAOO,OAAV,KACH,qBAAGpB,MAAkBO,SAASI,cAC1B,mBAAmC,EAAnC,EAAGX,MAAkBM,eAGlCe,EAAYR,IAAOS,IAAV,KAGS,qBAAGtB,MAAkBH,OAAOM,cAC/B,qBAAGH,MAAkBM,eAChB,qBAAGN,MAAkBH,OAAOM,cAIhDoB,EAAcV,IAAOW,MAAV,KACL,qBAAGC,SAAkD,cAAgB,aAElE,qBAAGzB,MAA8BO,SAASE,QAI5C,gBAAGT,EAAH,EAAGA,MAAH,gBAAkD,EAApBA,EAAMM,YAApC,cAA6E,EAApBN,EAAMM,YAA/D,SAGPoB,EAAcb,IAAOc,MAAV,KACL,qBAAGF,SAAkD,cAAgB,aAoClEG,EA3BM,SAAC,GAAyC,IAAvCC,EAAsC,EAAtCA,QAASC,EAA6B,EAA7BA,MAAUd,EAAmB,mCAC5D,OACE,kBAACC,EAAD,KACE,kBAACE,EAAD,KAAeH,EAAMQ,OACpBK,EAAQE,KAAI,SAACC,EAAKC,GAAN,OACX,kBAACZ,EAAD,CACEa,IAAG,UAAKlB,EAAMmB,KAAX,sBAA6BF,IAEhC,kBAACV,EAAD,CACEE,SAAUT,EAAMS,SAChBW,QAASJ,EAAIG,MAEb,kBAACT,EAAD,CACEW,gBAAerB,EAAMS,SACrBa,eAActB,EAAMuB,QACpBd,SAAUT,EAAMS,SAChBe,QAASR,EAAIG,OAASL,EACtBW,KAAK,UAENT,EAAIR,a,wOCrEjB,IAAMkB,EAAeC,YAAH,KAkCHC,MAxBf,WAAgB,IAAD,EACUC,oBAAS,GAAzBC,EADM,oBAGEC,EAAajD,EAAUgD,GAA9B9C,MAGR,OAFAgD,QAAQC,IAAI,aAAcF,GAGxB,kBAAC,IAAD,CAAe/C,MAAO+C,GACpB,kBAAC,IAAMG,SAAP,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,CACE1B,MAAM,WACNW,KAAK,gBACLN,QAAS,CACP,CAAEM,KAAM,QAASX,MAAO,QACxB,CAAEW,KAAM,QAASX,MAAO,YAG5B,kBAACkB,EAAD,S,MCvBYS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.7fd7a892.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Starjedi.cc3019aa.ttf\";","/* STYLE HELPERS */\nexport const colors = {\n  black: '#000',\n  green: '#40c1ac',\n  lightBlue: '#7edbc5',\n  lightRed: '#c8102e',\n  red: '#900',\n  white: '#fff',\n  yellow: '#fbe122',\n};\n\nexport interface ThemeProps {\n  theme: {\n    colors: {\n      backgroundColor: string;\n      focusColor: string;\n      errorColor: string;\n      successColor: string;\n      textColor: string;\n    },\n    spacingUnit: number;\n    fontSize: {\n      heading: number;\n      main: number;\n      small: number;\n      subheading: number;\n    };\n  };\n};\nexport const makeTheme = (dark = false) => ({\n  theme: {\n    colors: {\n      backgroundColor: dark ? colors.black : colors.white,\n      errorColor: colors.lightRed,\n      focusColor: dark ? colors.lightRed : colors.lightBlue,\n      successColor: colors.green,\n      textColor: dark ? colors.white : colors.black,\n    },\n    spacingUnit: 4,\n    fontSize: {\n      heading: 32,\n      main: 20,\n      small: 12,\n      subheading: 24,\n    },\n  }\n});\n","import React from 'react';\nimport styled from 'styled-components';\nimport { ThemeProps } from '../lib/helpers';\n\nconst StyledHeader = styled.h1`\n  background-color: ${({ theme }: ThemeProps) => theme.colors.backgroundColor};\n  color: ${({ theme }: ThemeProps) => theme.colors.textColor};\n  font-size: ${({ theme }: ThemeProps) => theme.fontSize.heading}px;\n  font-family: StarJedi, Arial;\n  margin: 0 0 ${({ theme }: ThemeProps) => theme.spacingUnit * 6}px;\n  padding: ${({ theme }: ThemeProps) => `${theme.spacingUnit * 3}px ${theme.spacingUnit * 4}px`};\n`;\ntype Props = {};\nconst Header = (props: Props) => {\n  return (\n    <StyledHeader>\n      Star Wars Quiz\n    </StyledHeader>\n  );\n}\n\nexport default Header;\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport { ThemeProps } from '../lib/helpers';\n\ninterface Props {\n  disabled?: boolean;\n  errored?: boolean;\n  label: string;\n  name: string;\n  options: {\n    label: string;\n    name: string;\n  }[];\n  value?: string | number;\n};\n\nconst StyledFieldset = styled.fieldset`\n  border: none;\n  display: flex;\n  margin: 0;\n  padding: 0;\n`;\nconst StyledLegend = styled.legend`\n  font-size: ${({ theme }) => theme.fontSize.subheading}px;\n  margin-bottom: ${({ theme }) => theme.spacingUnit * 2}px;\n  text-align: center;\n`;\nconst StyledDiv = styled.div`\n  display: flex;\n  :focus-within label {\n    border: 1px solid ${({ theme }) => theme.colors.focusColor};\n    border-radius: ${({ theme }) => theme.spacingUnit}px;\n    box-shadow: 0 0 3px ${({ theme }) => theme.colors.focusColor};\n    margin: 0 auto;\n  };\n`;\nconst StyledLabel = styled.label`\n  cursor: ${({ disabled }: { disabled?: boolean }) => disabled ? 'not-allowed' : 'initial'};\n  display: flex;\n  font-size: ${({ theme }: ThemeProps) => theme.fontSize.main}px;\n  justify-content: center;\n  margin: 1px auto; /* 1px to allow for focus border */\n  max-width: 300px;\n  padding: ${({ theme }: ThemeProps) => `${theme.spacingUnit * 2}px ${theme.spacingUnit * 3}px`};\n  width: 100%;\n`;\nconst StyledRadio = styled.input`\n  cursor: ${({ disabled }: { disabled?: boolean }) => disabled ? 'not-allowed' : 'initial'};\n  height: 0;\n  margin: 0;\n  opacity: 0;\n  width: 0;\n  :focus {\n    outline: none;\n  };\n`;\nconst RadioButtons = ({ options, value, ...props }: Props) => {\n  return (\n    <StyledFieldset>\n      <StyledLegend>{props.label}</StyledLegend>\n      {options.map((opt, i) => (\n        <StyledDiv\n          key={`${props.name}-radio-opt-${i}`}\n        >\n          <StyledLabel\n            disabled={props.disabled}\n            htmlFor={opt.name}\n          >\n            <StyledRadio\n              aria-disabled={props.disabled}\n              aria-invalid={props.errored}\n              disabled={props.disabled}\n              checked={opt.name === value}\n              type='radio'\n            />\n            {opt.label}\n          </StyledLabel>\n        </StyledDiv>\n      ))}\n    </StyledFieldset>\n  );\n};\n\nexport default RadioButtons;\n","import React, { useState } from 'react';\nimport { createGlobalStyle, ThemeProvider } from 'styled-components';\n\nimport { makeTheme } from './lib/helpers';\nimport Header from './components/Header';\nimport RadioButtons from './components/RadioButtons';\n\nconst GlobalStyles = createGlobalStyle`\n  @font-face {\n    font-family: 'StarJedi';\n    src: local('StarJedi'), ur;(./assets/Starjedi.ttf) format('truetype');\n  };\n  body: {\n    margin: 0;\n  };\n`;\n\nfunction App() {\n  const [darkSideMode] = useState(true);\n\n  const { theme: AppTheme } = makeTheme(darkSideMode);\n  console.log('AppTheme: ', AppTheme);\n\n  return (\n    <ThemeProvider theme={AppTheme}>\n      <React.Fragment>\n        <Header />\n        <RadioButtons\n          label='Question'\n          name='example-radio'\n          options={[\n            { name: 'opt-1', label: 'True' },\n            { name: 'opt-2', label: 'False' },\n          ]}\n        />\n        <GlobalStyles />\n      </React.Fragment>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './assets/Starjedi.ttf'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}