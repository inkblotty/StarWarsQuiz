{"version":3,"sources":["lib/theme.ts","components/Header.tsx","components/ToggleInput.tsx","views/settings/settingsMain.tsx","requests/api.ts","lib/helpers.ts","store/reducers.ts","store/QuizHandler.ts","store/actions.ts","components/Loading.tsx","components/RadioButtons.tsx","components/Button.tsx","views/quiz/QuizSummary.tsx","views/quiz/QuizError.tsx","views/quiz/QuizMain.tsx","App.tsx","serviceWorker.js","index.js"],"names":["colors","black","darkGray","green","lightBlue","lightGray","lightRed","medGray","red","white","yellow","makeTheme","dark","theme","backgroundImage","backgroundColor","disabledColor","errorColor","focusColor","successColor","textColor","spacingUnit","fontSize","heading","main","small","subheading","StyledHeader","styled","h1","StyledSpan","span","Header","props","StyledInput","input","blue","StyledHiddenSpan","StyledLabelText","StyledLabel","label","StyledToggleBackground","div","SwitchLabel","itemProp","switchHeight","SwitchHandle","ToggleInput","field","onChange","disabled","name","isActive","value","onClick","id","type","checked","aria-labelledby","readOnly","aria-live","className","toString","data-on","data-off","style","transform","role","aria-hidden","StyledDiv","Settings","darkSideMode","forwardDarkSideToggle","getGeneratedQuiz","a","axios","get","response","rgba","hex","alpha","color","replace","m","r","g","b","result","exec","parseInt","hexToRgb","quizReducer","prevState","action","quizData","Object","keys","reduce","prev","key","newState","errored","QuizHandler","useReducer","quizState","dispatchQuizState","initQuiz","configObj","Array","isArray","Error","answerQuizQuestion","question","answer","correctAnswer","missingRequired","forEach","push","join","Arc","fontColor","Loading","aria-label","StyledFieldset","fieldset","StyledLegend","legend","StyledRadio","withTheme","options","isDisabled","map","opt","i","htmlFor","e","onKeyPress","val","captureKeyPress","optValue","borderColor","tabIndex","aria-disabled","aria-invalid","StyledButton","button","QuizSummary","erroredList","restartQuiz","successList","length","q","Fragment","Button","StyledWrapper","QuizError","error","QuizTitle","QuizHelperText","p","QuizWrapper","QuizMain","useState","isLoading","setIsLoading","isComplete","setIsComplete","setError","activeQIndex","setActiveQIndex","filter","getQuiz","quiz","data","questions","initialized","useEffect","continueFinishButton","document","getElementById","focus","console","log","window","allElems","querySelectorAll","focusOnFirst","activeQuestionId","activeQuestion","answerValue","preventDefault","GlobalStyles","createGlobalStyle","StyledAppWrapper","App","setDarkSideMode","AppTheme","target","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.67c256ce.chunk.js","sourcesContent":["/* STYLE HELPERS */\nexport const colors : { [key: string]: string } = {\n  black: '#000',\n  darkGray: '#3f3f3f',\n  green: '#40c1ac',\n  lightBlue: '#7edbc5',\n  lightGray: '#d7d7d7',\n  lightRed: '#c8102e',\n  medGray: '#808080',\n  red: '#900',\n  white: '#fff',\n  yellow: '#fbe122',\n};\n\nexport interface ThemeProps {\n  theme: {\n    backgroundImage: string;\n    colors: {\n      backgroundColor: string;\n      disabledColor: string;\n      focusColor: string;\n      errorColor: string;\n      successColor: string;\n      textColor: string;\n      [key: string]: string;\n    },\n    spacingUnit: number;\n    fontSize: {\n      heading: number;\n      main: number;\n      small: number;\n      subheading: number;\n    };\n  };\n};\nexport const makeTheme = (dark = false) => ({\n  theme: {\n    backgroundImage: dark\n      ? 'http://www.sompaisoscatalans.cat/simage/182/1829981/star-wars-flat-wallpaper.png'\n      : 'https://mir-s3-cdn-cf.behance.net/project_modules/fs/5bff4614711385.56287ebd2a58e.jpg',\n    colors: {\n      backgroundColor: dark ? colors.black : colors.white,\n      disabledColor: dark ? colors.darkGray : colors.lightGray,\n      errorColor: colors.lightRed,\n      focusColor: dark ? colors.lightRed : colors.lightBlue,\n      successColor: colors.green,\n      textColor: dark ? colors.white : colors.darkGray,\n      ...colors,\n    },\n    spacingUnit: 4,\n    fontSize: {\n      heading: 32,\n      main: 20,\n      small: 12,\n      subheading: 24,\n    },\n  }\n});\n","import React from 'react';\nimport styled from 'styled-components';\nimport { ThemeProps } from '../lib/theme';\n\nconst StyledHeader = styled.h1`\n  align-items: center;\n  display: flex;\n  font-size: ${({ theme }: ThemeProps) => theme.fontSize.heading}px;\n  margin: 0;\n  padding: ${({ theme }: ThemeProps) => `${theme.spacingUnit * 3}px ${theme.spacingUnit * 4}px`};\n  text-transform: uppercase;\n  @media screen and (max-width: 900px) {\n    font-size: 28px;\n    justify-content: center;\n  };\n`;\nconst StyledSpan = styled.span`\n  text-shadow: -2px 2px 0 ${({ theme }: ThemeProps) => theme.colors.black},\n    2px -2px 0 ${({ theme }: ThemeProps) => theme.colors.black},\n    -2px -2px 0 ${({ theme }: ThemeProps) => theme.colors.black},\n    2px 2px 0 ${({ theme }: ThemeProps) => theme.colors.black}\n  ;\n  color: ${({ theme }: ThemeProps) => theme.colors.yellow};\n  display: inline-block;\n  font-family: StarJedi, Verdana, sans-serif;\n  font-size: 44px;\n  margin-bottom: 6px; /* free font has odd alignment */\n  padding: 0 ${({ theme }: ThemeProps) => theme.spacingUnit * 4}px;\n  @media screen and (max-width: 900px) {\n    font-size: 30px;\n  };\n`;\ntype Props = {};\nconst Header = (props: Props) => {\n  return (\n    <StyledHeader>\n      <StyledSpan>Star Wars </StyledSpan>\n      Quiz\n    </StyledHeader>\n  );\n}\n\nexport default Header;\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport { FormField } from './types';\n\nconst switchHeight = 30;\nconst StyledInput = styled.input`\n  height: 0;\n  opacity: 0;\n  overflow: hidden;\n  width: 0;\n  :focus ~ .toggle-background: {\n    border-radius: ${switchHeight};\n    box-shadow: ${({ theme }) => `0 0 5px ${theme.colors.blue}`};\n  },\n`;\nconst StyledHiddenSpan = styled.span`\n  height: 0;\n  opacity: 0;\n  overflow: hidden;\n  width: 0;\n`;\nconst StyledLabelText = styled.span`\n  align-items: center;\n  display: flex;\n  padding: 0 5px;\n`;\nconst StyledLabel = styled.label`\n  align-items: center;\n  box-sizing: border-box;\n  cursor: pointer;\n  display: inline-flex;\n  font-weight: 400;\n  height: ${switchHeight};\n  outline: none;\n  position: relative;\n  userSelect: none;\n`;\nconst StyledToggleBackground = styled.div`\n  display: flex;\n`;\nconst SwitchLabel = styled.span`\n  background-color: ${({ theme, itemProp }) => itemProp === 'false' ? theme.colors.disabledColor : theme.colors.yellow};\n  border-radius: ${switchHeight}px;\n  box-shadow: ${({ itemProp }) => itemProp === 'false' ? 'inset 0 0 5px rgba(0,0,0,0.5)' : 'none'};\n  display: inline-block;\n  height: ${switchHeight}px;\n  justify-content: flex-start;\n  width: ${switchHeight * 2}px;\n`;\nconst SwitchHandle = styled.span`\n  background-color: ${({ theme }) => theme.colors.backgroundColor};\n  border-radius: 50%;\n  box-shadow: 2px 2px 4px 0 rgba(0, 0, 0, 0.3);\n  display: inline-block;\n  height: ${switchHeight - 4}px;\n  margin-left: 4px;\n  margin-top: 2px;\n  position: absolute;\n  transition: transform ease 0.3s;\n  width: ${switchHeight - 4}px;\n`;\n\ninterface Props {\n  field: FormField;\n  onChange: (e : any) => void;\n};\nconst ToggleInput = ({ field, onChange } : Props) => {\n  const {\n    disabled,\n    label,\n    name,\n    value,\n  } = field;\n  const isActive = !!value;\n  return (\n    <StyledLabel\n      onClick={!disabled ? onChange : () => ''}\n      id={`${name}-label`}\n    >\n      <StyledLabelText>\n        {label}\n      </StyledLabelText>\n      <StyledInput\n        type='checkbox'\n        checked={isActive}\n        id={name}\n        name={name}\n        aria-labelledby={`${name}-aria-label`}\n        readOnly\n        aria-live='polite'\n      />\n      <StyledHiddenSpan\n        id={`${name}-aria-label`}\n        aria-live='polite'\n      >\n        {label}: {isActive ? 'on ' : 'off '}\n        <span>\n          Press Space Bar to toggle on or off.\n        </span>\n      </StyledHiddenSpan>\n      <StyledToggleBackground className='toggle-background'>\n        <SwitchLabel\n          itemProp={isActive.toString()}\n          data-on={'On'}\n          data-off={'Off'}\n        />\n        <SwitchHandle\n          style={isActive ? { transform: `translateX(${switchHeight - 4}px)` } : {}}\n          role='presentation'\n          aria-hidden\n        />\n      </StyledToggleBackground>\n    </StyledLabel>\n  )\n}\n\nexport default ToggleInput;\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport ToggleInput from '../../components/ToggleInput';\n\nconst StyledDiv = styled.div`\n  display: flex;\n  justify-content: flex-start;\n  padding: 8px 16px;\n`;\n\ninterface Props {\n  darkSideMode: boolean;\n  forwardDarkSideToggle: (e : any) => void;\n}\nconst Settings = ({ darkSideMode, forwardDarkSideToggle }: Props) => {\n  return (\n    <StyledDiv>\n      <ToggleInput\n        field={{\n          name: 'darkSideModeToggle',\n          label: 'Dark Side Mode',\n          value: darkSideMode,\n          type: 'checkbox'\n        }}\n        onChange={forwardDarkSideToggle}\n      />\n    </StyledDiv>\n  )\n}\nexport default Settings;\n","import axios from 'axios';\n\nconst OUR_API_BASE = 'http://localhost:8080/api';\n\nexport const getGeneratedQuiz = async () => {\n  try {\n    const response = await axios.get(`${OUR_API_BASE}/newQuiz`);\n    return response;\n  } catch (err) {\n    throw err;\n  }\n};\n","const hexToRgb = (hex : string) : { r : number, g : number, b: number } | null => {\n  // http://stackoverflow.com/a/5624139\n  var shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n  hex = hex.replace(shorthandRegex, function (m, r, g, b) {\n    return r + r + g + g + b + b;\n  });\n\n  var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n  return result ? {\n    r: parseInt(result[1], 16),\n    g: parseInt(result[2], 16),\n    b: parseInt(result[3], 16),\n  } : null;\n};\n\nexport const rgba = (hex : string, alpha : number) : string => {\n  const color = hexToRgb(hex);\n  if (color) {\n    return `rgba(${color.r}, ${color.g}, ${color.b}, ${alpha})`;\n  }\n  return hex;\n};\n\nconst focusables = `button:not([disabled]),textarea:not([disabled]),a:not([disabled]),\\\nselect:not([disabled]),[tabindex]:not([tabindex=\"-1\"]),\\\ninput:not([disabled]):not([type=\"hidden\"]):not([hidden]),[role=\"option\"]`;\nexport const focusOnFirst = () => {\n  if (window && document) {\n    const allElems = document.querySelectorAll(focusables);\n    if (allElems && !!allElems[0]) {\n      // @ts-ignore\n      allElems[0].focus();\n    }\n  }\n}","import { QuizAction, QuizState } from './types';\n\nexport const quizReducer = (prevState : QuizState, action : QuizAction) : QuizState => {\n  switch (action.type) {\n    case 'init': {\n      if (!action.quizData) {\n        return prevState;\n      }\n      return Object.keys(action.quizData).reduce((prev, key) => ({\n        ...prev,\n        [key]: (action.quizData || {})[key],\n      }), {});\n    }\n    case 'error': {\n      const { key = null, value = '' } = action.field || {};\n      if (!key) {\n        return prevState;\n      }\n      const newState : QuizState = { ...prevState };\n      newState[key].value = value;\n      newState[key].errored = true;\n      return newState;\n    }\n    case 'success': {\n      const { key = null, value = '' } = action.field || {};\n      if (!key) {\n        return prevState;\n      }\n      const newState = { ...prevState };\n      newState[key].value = value;\n      newState[key].errored = false;\n      return newState;\n    }\n    default: {\n      return prevState;\n    }\n  };\n}\n","import { useReducer } from 'react';\nimport { quizReducer } from './reducers';\nimport { answerQuizQuestion, initQuiz } from './actions';\nimport { QuizState, SingleQuizField, SingleAnswerField } from './types';\n\nexport interface QuizHandlerOutput {\n  answerQuizQuestion: (question : SingleQuizField, answer : SingleAnswerField) => void;\n  initQuiz: (input : QuizState) => void;\n  quizState: QuizState;\n}\n\n/* abstracts dispatch out slightly so only pre-defined actions\ncan be called (no direct access to the dipatch) */\nconst QuizHandler = () : QuizHandlerOutput => {\n  const [quizState, dispatchQuizState] = useReducer(quizReducer, {});\n  return {\n    quizState,\n    initQuiz: (input : QuizState) => dispatchQuizState(initQuiz(input)),\n    answerQuizQuestion: (question : SingleQuizField, answer : SingleAnswerField) => dispatchQuizState(answerQuizQuestion(question, answer)),\n  };\n}\n\nexport default QuizHandler;\n","import { QuizState, SingleAnswerField, SingleQuizField, QuizAction } from './types';\n\nexport const initQuiz = (configObj : QuizState) : QuizAction => {\n  if (!configObj || Array.isArray(configObj) || (typeof configObj !== 'object')) {\n    throw new Error('Invalid config object.');\n  }\n  return {\n    type: 'init',\n    quizData: configObj,\n  };\n};\n\nexport const answerQuizQuestion = ({ correctAnswer } : SingleQuizField, { value, key } : SingleAnswerField) : QuizAction => {\n  const required = [correctAnswer, key, value];\n  if (!correctAnswer || !key || !value) {\n    const missingRequired : string[] = [];\n    required.forEach(input => {\n      if (!input) {\n        missingRequired.push(Object.keys({ input })[0]);\n      } \n    });\n    throw new Error(`Missing required fields: ${missingRequired.join(', ')}`);\n  }\n  if (correctAnswer === value) {\n    return {\n      type: 'success',\n      field: {\n        errored: false,\n        key,\n        value,\n      },\n    };\n  }\n  return {\n    type: 'error',\n    field: {\n      errored: true,\n      key,\n      value,\n    },\n  };\n}","import React from 'react';\nimport styled from 'styled-components';\n\nconst size = 30;\nconst Arc = styled.div`\n  border: 10px solid ${({ theme }) => theme.colors.fontColor};\n  height: ${size}px;\n  margin: 6px; /* enough so the points of the square don't overlap nearby content */\n  width: ${size}px;\n\n  @keyframes infinite-spinning {\n    from {\n      transform: rotate(0deg);\n    }\n    to {\n      transform: rotate(360deg);\n    }\n  }\n\n  -webkit-animation: infinite-spinning 1s infinite; /* Safari 4+ */\n  -moz-animation:    infinite-spinning 1s infinite; /* Fx 5+ */\n  -o-animation:      infinite-spinning 1s infinite; /* Opera 12+ */\n  animation:         infinite-spinning 1s infinite; /* IE 10+, Fx 29+ */\n`;\n\nconst Loading = () => (\n  <Arc aria-label='Loading' />\n);\n\nexport default Loading;\n","import React from 'react';\nimport styled, { withTheme } from 'styled-components';\n\nimport { ThemeProps } from '../lib/theme';\nimport { FormField } from './types';\n\ninterface Props {\n  correctAnswer: string;\n  field: FormField;\n  onChange: (value: string | number) => void;\n  theme: ThemeProps['theme'];\n};\n\nconst StyledFieldset = styled.fieldset`\n  border: none;\n  display: flex;\n  margin: 0;\n  padding: 0;\n`;\nconst StyledLegend = styled.legend`\n  font-size: ${({ theme }) => theme.fontSize.subheading}px;\n  margin-bottom: ${({ theme }) => theme.spacingUnit * 2}px;\n  text-align: center;\n`;\nconst StyledDiv = styled.div`\n  display: flex;\n  margin-top: 8px;\n  :focus-within label {\n    background-color: ${({ theme }) => theme.colors.focusColor};\n    margin: 0 auto;\n  };\n`;\nconst StyledLabel = styled.label` /* lots of repeats here from StyledButton, but element type needs to be different -- remedy */\n  background-color: ${({ disabled, theme }) => disabled ? theme.colors.disabledColor : theme.colors.backgroundColor};\n  border: 2px solid ${({ theme }) => theme.colors.textColor};\n  box-shadow: ${({ disabled, theme }) => disabled ? 'none' : `2px 2px 3px ${theme.colors.textColor}`};\n  color: ${({ disabled, theme }) => disabled ? theme.colors.medGray : theme.colors.textColor};\n  cursor: ${({ disabled }: { disabled?: boolean }) => disabled ? 'not-allowed' : 'pointer'};\n  display: flex;\n  font-size: ${({ theme }: ThemeProps) => theme.fontSize.main}px;\n  justify-content: center;\n  margin: 1px auto; /* 1px to allow for focus border */\n  max-width: 600px;\n  padding: ${({ theme }: ThemeProps) => `${theme.spacingUnit * 2}px ${theme.spacingUnit * 3}px`};\n  width: 100%;\n`;\nconst StyledRadio = styled.input`\n  height: 0;\n  margin: 0;\n  opacity: 0;\n  width: 0;\n  :focus {\n    outline: none;\n  };\n`;\nconst RadioButtons = ({ correctAnswer, field, onChange, theme, ...props }: Props) => {\n  const { disabled, errored, label, name, options = [], value } = field;\n  const isDisabled = disabled || !!value;\n  const endStyles = (optValue: string) => {\n    if (value && (optValue === correctAnswer)) {\n      return {\n        borderColor: theme.colors.green,\n      };\n    }\n    if (value && (optValue !== correctAnswer)) {\n      return {\n        borderColor: theme.colors.lightRed,\n      };\n    }\n    return {};\n  };\n\n  const captureKeyPress = (e : any, val : string | number) => {\n    if (e && e.key && (e.key === 'Enter' || (e.key === 'Space'))) {\n      onChange(val);\n    }\n  }\n\n  return (\n    <StyledFieldset>\n      <StyledLegend>{label}</StyledLegend>\n      {options.map((opt, i) => (\n        <StyledDiv\n          key={`${name}-radio-opt-${i}`}\n        >\n          <StyledLabel\n            disabled={isDisabled}\n            htmlFor={opt.value}\n            onClick={isDisabled ? () => '' : (e: any) => onChange(opt.value)}\n            onKeyPress={e => captureKeyPress(e, opt.value)}\n            style={endStyles(opt.value.toString())}\n            tabIndex={isDisabled ? -1 : 1}\n          >\n            <StyledRadio\n              aria-disabled={isDisabled}\n              aria-invalid={errored}\n              disabled={isDisabled}\n              checked={opt.value === value}\n              type='radio'\n            />\n            {opt.label}\n          </StyledLabel>\n        </StyledDiv>\n      ))}\n    </StyledFieldset>\n  );\n};\n\nexport default withTheme(RadioButtons);\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst StyledButton = styled.button`\n  background-color: ${({ disabled, theme }) => disabled ? theme.colors.disabledColor : theme.colors.yellow};\n  border: 2px solid ${({ theme }) => theme.colors.black };\n  border-radius: 8px;\n  box-shadow: ${({ disabled, theme }) => disabled ? 'none' : `2px 2px 3px ${theme.colors.textColor}`};\n  color: ${({ disabled, theme }) => disabled ? theme.colors.medGray : theme.colors.black};\n  cursor: ${({ disabled }: { disabled?: boolean }) => disabled ? 'not-allowed' : 'pointer'};\n  display: flex;\n  font-size: 18px;\n  height: 50px;\n  justify-content: center;\n  text-transform: uppercase;\n  width: 80%;\n  :focus {\n    background-color: ${({ theme }) => theme.colors.focusColor};\n  }\n}\n`;\nexport default StyledButton;","import React from 'react';\nimport { SingleQuizField } from '../../store/types';\nimport Button from '../../components/Button';\n\ninterface Props {\n  erroredList: SingleQuizField[];\n  restartQuiz: () => void;\n  successList: SingleQuizField[];\n}\nconst QuizSummary = ({ erroredList, restartQuiz, successList }: Props) => {\n  return (\n    <div>\n      You got {successList.length} out of {successList.length + erroredList.length}\n      <dl>\n        {successList.map((q, i) => (\n          <React.Fragment key={`successQuestion-${i}`}>\n            <dt>{q.label}</dt>\n            <dd>Correct Answer: {q.correctAnswer}</dd>\n            <dd>Your Answer: {q.value}</dd>\n          </React.Fragment>\n        ))}\n      </dl>\n      <dl>\n        {erroredList.map((q, i) => (\n          <React.Fragment key={`erroredQuestion-${i}`}>\n            <dt>{q.label}</dt>\n            <dd>Correct Answer: {q.correctAnswer}</dd>\n            <dd>Your Answer: {q.value}</dd>\n          </React.Fragment>\n        ))}\n      </dl>\n      <Button onClick={restartQuiz}>\n        Start a New Quiz\n      </Button>\n    </div>\n  )\n}\n\nexport default QuizSummary;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst StyledWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  padding: 12px 18px;\n`;\n\ninterface Props {\n  error: string;\n}\nconst QuizError = ({ error }: Props) => (\n  <StyledWrapper>\n    {error}\n  </StyledWrapper>\n);\nexport default QuizError;\n","import React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\n\nimport { getGeneratedQuiz } from '../../requests/api';\nimport { focusOnFirst, rgba } from '../../lib/helpers';\nimport QuizHandler from '../../store';\nimport Loading from '../../components/Loading';\nimport RadioButtons from '../../components/RadioButtons';\nimport Button from '../../components/Button';\nimport { SingleQuizField } from '../../store/types';\n\nimport QuizSummary from './QuizSummary';\nimport QuizError from './QuizError';\n\nconst QuizTitle = styled.div`\n  display: flex;\n  justify-content: center;\n  width: 100%;\n`;\nconst QuizHelperText = styled.p`\n  font-size: 32px;\n  height: 32px;\n  text-align: center;\n  width: 100%;\n`;\nconst QuizWrapper = styled.div`\n  background-color: ${({ theme }) => rgba(theme.colors.backgroundColor, 0.8)};\n  border-radius: 8px;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  margin: 0 auto;\n  max-width: 650px;\n  min-width: 300px;\n  padding: 20px 23px;\n`;\nconst QuizMain = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [isComplete, setIsComplete] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const { quizState, initQuiz, answerQuizQuestion } = QuizHandler();\n  const [activeQIndex, setActiveQIndex] = useState<number | null>(null);\n\n  const successList = Object.keys(quizState).filter(key => (\n    quizState[key].value === quizState[key].correctAnswer\n  )).map(key => quizState[key]);\n  const erroredList = Object.keys(quizState).filter(key => (\n    quizState[key].value && (quizState[key].value !== quizState[key].correctAnswer)\n  )).map(key => quizState[key]);\n\n  const getQuiz = async () => {\n    try {\n      setIsLoading(true);\n      const quiz = await getGeneratedQuiz();\n      initQuiz({ ...quiz.data.questions });\n      setActiveQIndex(0);\n      setIsLoading(false);\n    } catch (err) {\n      setIsLoading(false);\n      setError(err.toString());\n    }\n  }\n\n  // initialization effect hook\n  const initialized = !!initQuiz && !!getQuiz;\n  useEffect(() => {\n    getQuiz();\n  }, [initialized]);\n\n  // post-answer focus hook\n  useEffect(() => {\n    const continueFinishButton = document.getElementById('continueFinishButton');\n    if (!!continueFinishButton) {\n      continueFinishButton.focus();\n    }\n  }, [successList.length, erroredList.length]);\n\n  // new question focus hook\n  useEffect(() => {\n    console.log('focusing on first');\n    focusOnFirst();\n  }, [!isLoading, activeQIndex]);\n\n  const restartQuiz = () => {\n    getQuiz();\n  }\n\n  if (error) {\n    return (\n      <QuizWrapper>\n        <QuizError error={error || 'Quiz could not load. Please try again.'} />\n        <Button onClick={getQuiz}>Try Again</Button>\n      </QuizWrapper>\n    );\n  }\n  if (isLoading || (activeQIndex === null)) {\n    return (\n      <QuizWrapper>\n        <QuizTitle>Generating Quiz Questions</QuizTitle>\n        <Loading />\n      </QuizWrapper>\n    );\n  }\n  if (isComplete) {\n    return (\n      <QuizWrapper>\n        <QuizSummary\n          erroredList={erroredList}\n          restartQuiz={restartQuiz}\n          successList={successList}\n        />\n      </QuizWrapper>\n    )\n  }\n  \n  const activeQuestionId = Object.keys(quizState)[activeQIndex];\n  const activeQuestion : SingleQuizField = {\n    ...quizState[activeQuestionId],\n    name: `questionField-${activeQuestionId}`,\n  };\n  \n  const forwardToAnswerQuestion = (answerValue: string | number) => {\n    if (!answerValue) {\n      return;\n    }\n    answerQuizQuestion(activeQuestion, { key: activeQuestionId.toString(), value: answerValue.toString() });\n  }\n\n  const continueToNext = (e: any) => {\n    if (e) {\n      e.preventDefault();\n    }\n    if (Object.keys(quizState).length === activeQIndex + 1) {\n      setIsComplete(true);\n    } else {\n      setActiveQIndex(activeQIndex + 1);\n    }\n  }\n\n  console.log('successList: ', successList);\n  console.log('erroredList: ', erroredList);\n\n  return (\n    <QuizWrapper>\n      <QuizTitle>\n        Question: {activeQIndex + 1}\n      </QuizTitle>\n      <RadioButtons\n        correctAnswer={activeQuestion.correctAnswer.toString()}\n        field={activeQuestion}\n        onChange={forwardToAnswerQuestion}\n      />\n      {activeQuestion.value\n        ? (\n          <QuizHelperText>\n            {activeQuestion.errored ? 'Wrong :(' : 'Correct! :)'}\n          </QuizHelperText>\n        ) : <QuizHelperText />}\n      <Button\n        disabled={!activeQuestion.value}\n        id='continueFinishButton'\n        onClick={continueToNext}\n      >\n        {activeQIndex === (Object.keys(quizState).length - 1)\n          ? 'Finish Quiz'\n          : 'Next Question'\n        }\n      </Button>\n    </QuizWrapper>\n  )\n}\nexport default QuizMain;\n","import React, { useState } from 'react';\nimport styled, { createGlobalStyle, ThemeProvider } from 'styled-components';\n\nimport { makeTheme, ThemeProps } from './lib/theme';\nimport Header from './components/Header';\nimport Settings from './views/settings';\nimport QuizMain from './views/quiz';\n\nconst GlobalStyles = createGlobalStyle`\n  * {\n    color: ${({ theme }: ThemeProps) => theme.colors.textColor};\n    font-family: Verdana;\n    margin: 0px;\n    padding: 0px;\n    -webkit-transition: color 0.2s ease-in-out;\n    transition: color 0.2s ease-in-out;\n  };\n  #root {\n    background: ${({ theme }: ThemeProps) => `${theme.colors.backgroundColor} url('${theme.backgroundImage}')`};\n    background-position: center;\n    background-size: cover;\n    height: 100vh;\n    -webkit-transition: background-image 0.2s ease-in-out;\n    transition: background-image 0.2s ease-in-out;\n  }\n`;\nconst StyledAppWrapper = styled.div`\n  display: grid;\n  grid-template-rows: 100px minmax(300px, calc(100% - 180px)) 80px;\n  height: 100vh;\n`;\n\nfunction App() {\n  const [darkSideMode, setDarkSideMode] = useState(false);\n\n  const { theme: AppTheme } = makeTheme(darkSideMode);\n\n  const forwardDarkSideToggle = (e : any) => {\n    if (e && e.target) {\n      e.preventDefault();\n    }\n    setDarkSideMode(!darkSideMode);\n  }\n\n  return (\n    <ThemeProvider theme={AppTheme}>\n      <StyledAppWrapper>\n        <Header />\n        <QuizMain />\n        <Settings\n          darkSideMode={darkSideMode}\n          forwardDarkSideToggle={forwardDarkSideToggle}\n        />\n        <GlobalStyles theme={AppTheme} />\n      </StyledAppWrapper>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}